BeanFactory 一个IOC容器
ApplicationContext <- BeanFactory



配置项
@Configuration -> 相当于xml

@bean -> 代替了xml中 <bean>

@Component -> 用在类级别上注解,在spring中,加上该注解的类将当成一个bean

@ComponentScan("com.example.demo.PO") -> 为了需要感知被@Component加上注解的类 需要使用该注解进行扫描，

自动注入
@Autowired -> 按照对应属性,在IOC容器中寻找已经存在的bean。赋值在对应的属性上
@Qualifier // 当多个相同类型的bean需要注入时，使用该注解选择其中一个  所属范围：全部

@Bean
@Primary //当多个Bean需要注入时候，使用@Primay作为默认Bean(无使用@Qualifier)。使用范围：方法

@Resource 按照bean的名称,在IOC中寻找bean,并注入 @Autowired(按照属性) + @Qualifier


----------
ApplicationContextAware

-----
FactoryBean  一个bean工厂

FactoryBean -> ToyFactoryBean
Toy  -> Ball / Car
Child

---------
bean作用域
1. singleton 单例bean (默认)
@Scope("singleton")  -> 放入factoryBean中的bean,地址都为同一个,每次请求都请求到同一个对象中 applicationContext中已经初始化好了


2. prototype 原型bean
@Scope("prototype") -> 放入factoryBean的bean,每个bean的地址不一样，每次请求都是新的对象

3. request

4. session

5. application

---------
bean 实例方式
分别通过静态工厂,实例工厂, IOC容器 注册bean
1. 静态工厂
    工厂本身不会注入IOC容器中
2. 实例工厂
    工厂自身会注入IOC容器中
3. <bean id="car" class="com.xx.x.xxx.x"/>
IOC容器的三个bean都不一样

---------
bean 生命周期
1. IOC初始化
2. @PostConstruct (如有)
3. Initializing.afterPropertiesSet()(如有)
4. xml中init-method方法(如有)


1. desctory-method方法(如有)
2. DisposableBean.destory()(如有)
3. @PreDestroy(如有)
4. IOC销毁


JSR250 规范
start IOC
@PostConstruct  -> xml中init-method方法
JSR250 规范
@PreDestroy -> xml中 desctory-method方法
cloe IOC

---------------
beanFactory  大佬 基础容器
HierarchicalBeanFactory 层次bean工厂
ListableBeanFactory 有选择性的列举bean工厂 只会列出容器中的bean 手动注入的不会列举出
AutowireCapableBeanFactory 支持自动装配的bean工厂 一般使用与其他框架集成时，一些bean无法让spring控制，又想进行注入由spring管理的对象

IOC中的DI和DL

DI:由客户端从IOC容器中取出,并保存至自身的成员属性
DL:给spring管理的加上@AutoWired等自动注入的注解,并让IOC进行自动识别,完成自动注入


BeanFactory

HierarchicalBeanFactory

ListableBeanFactory



ApplicationContext:

访问应用的beanFactory方法 -> 继承beanFactory
加载文件资源能力 -> 继承ResourceLoader
事件发布给监听器 -> 继承ApplicationEventPublisher
解析消息,国际化 -> 继承MessageResource
继承父 上下文(百度说上下文即一个全局的ServletContext, 存储着全局的，重要的线程安全的信息)

ConfigurationApplicationContext
为applicationContext提供了可配置的可能

EnvironmentCapable功能
environment 是spring中独立出来运行环境的独立抽象,内部存放着应用程序运行的一些配置。
在spring运行当中，包含"应用程序（applicationContext）" + "应用程序运行的环境(applicationContext-environment)"

ResourcePatternResolver(资源模式解析器)
1. 支持Ant路径模式的匹配。e.g. /WEB-INF/*-context.xml /**/*.xml 等
2. 可以匹配到类路径下的文件：加一个"classpath*:"，不仅可以匹配webapps下的文件，也可匹配classpath下的文件






