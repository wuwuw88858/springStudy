BeanFactory 一个IOC容器
ApplicationContext <- BeanFactory



配置项
@Configuration -> 相当于xml

@bean -> 代替了xml中 <bean>

@Component -> 用在类级别上注解,在spring中,加上该注解的类将当成一个bean

@ComponentScan("com.example.demo.PO") -> 为了需要感知被@Component加上注解的类 需要使用该注解进行扫描，

自动注入
@Autowired -> 按照对应属性,在IOC容器中寻找已经存在的bean。赋值在对应的属性上
@Qualifier // 当多个相同类型的bean需要注入时，使用该注解选择其中一个  所属范围：全部

@Bean
@Primary //当多个Bean需要注入时候，使用@Primay作为默认Bean(无使用@Qualifier)。使用范围：方法

@Resource 按照bean的名称,在IOC中寻找bean,并注入 @Autowired(按照属性) + @Qualifier


----------
ApplicationContextAware

-----
FactoryBean  一个bean工厂

FactoryBean -> ToyFactoryBean
Toy  -> Ball / Car
Child

---------
bean作用域
1. singleton 单例bean (默认)
@Scope("singleton")  -> 放入factoryBean中的bean,地址都为同一个,每次请求都请求到同一个对象中 applicationContext中已经初始化好了


2. prototype 原型bean
@Scope("prototype") -> 放入factoryBean的bean,每个bean的地址不一样，每次请求都是新的对象

3. request

4. session

5. application

---------
bean 实例方式
分别通过静态工厂,实例工厂, IOC容器 注册bean
1. 静态工厂
    工厂本身不会注入IOC容器中
2. 实例工厂
    工厂自身会注入IOC容器中
3. <bean id="car" class="com.xx.x.xxx.x"/>
IOC容器的三个bean都不一样

---------
bean 生命周期
1. IOC初始化
2. @PostConstruct (如有)
3. Initializing.afterPropertiesSet()(如有)
4. xml中init-method方法(如有)


1. desctory-method方法(如有)
2. DisposableBean.destory()(如有)
3. @PreDestroy(如有)
4. IOC销毁


JSR250 规范
start IOC
@PostConstruct  -> xml中init-method方法
JSR250 规范
@PreDestroy -> xml中 desctory-method方法
cloe IOC

---------------
beanFactory  大佬 基础容器
HierarchicalBeanFactory 层次bean工厂
ListableBeanFactory 有选择性的列举bean工厂 只会列出容器中的bean 手动注入的不会列举出
AutowireCapableBeanFactory 支持自动装配的bean工厂 一般使用与其他框架集成时，一些bean无法让spring控制，又想进行注入由spring管理的对象

IOC中的DI和DL

DI:由客户端从IOC容器中取出,并保存至自身的成员属性
DL:给spring管理的加上@AutoWired等自动注入的注解,并让IOC进行自动识别,完成自动注入


BeanFactory

HierarchicalBeanFactory

ListableBeanFactory



ApplicationContext:

访问应用的beanFactory方法 -> 继承beanFactory
加载文件资源能力 -> 继承ResourceLoader
事件发布给监听器 -> 继承ApplicationEventPublisher
解析消息,国际化 -> 继承MessageResource
继承父 上下文(百度说上下文即一个全局的ServletContext, 存储着全局的，重要的线程安全的信息)

ConfigurationApplicationContext
为applicationContext提供了可配置的可能

EnvironmentCapable功能
environment 是spring中独立出来运行环境的独立抽象,内部存放着应用程序运行的一些配置。
在spring运行当中，包含"应用程序（applicationContext）" + "应用程序运行的环境(applicationContext-environment)"

ResourcePatternResolver(资源模式解析器)
1. 支持Ant路径模式的匹配。e.g. /WEB-INF/*-context.xml /**/*.xml 等
2. 可以匹配到类路径下的文件：加一个"classpath*:"，不仅可以匹配webapps下的文件，也可匹配classpath下的文件


GenericApplicationContext
1. 组合beanFactory
2. 借助BeanDefinitionRegistry(bean定义的注册器)处理特殊的bean

AbstractApplicationContext
1. 支持多次bean的刷新
2. 加载bean定义信息，多次刷新的时候，bean信息会被覆盖


asbtract下面的实现类
ClassPathXmlApplicationCOntext和FileSystemXmlApplicationContext


Spring的事件监听
ContextRefreshEvent 和  ContextCloseEvent

ContextStartEvent   和  ContextStoppedEvent


Spring中的模块装配
模块相当于高内聚 高独立性的功能单元;
模块装配即把一个模块需要的核心功能组件都以简洁的方式进行装配。


模块装配的核心原则：自定义注解 + @Import导入组件

@Import({xxx.Class})
public @interface config {
}

1. 导入普通类
    @config
2. 导入配置类
    同理 @config +@Configuration

3. 导入ImportSelector  > 声明式导入

4. 导入ImportBeanDefinitionRegister  -> 编程式导入


条件装配

1. @profile方式
    环境式装配，无法进行单个bean进行装配

2. 运行环境配置
    在 VM options中进行配置

3. @Conditional方式
    被标注@Condtional注解的bean,只有条件满足，才可注入到IOC容器之中。


组件扫描
1. 规则-> @ComponentScan(basePackages="",includeFilters=@ComponentScan.Filter(Animals.class))
A, B类分别加上了@Animals  B, C类有@Component
在@ComonentScan中，会有默认规则,将@Component中的都加进去IOC当中,且因为在inClude规则中,加上@Animals注解的类也会加入IOC中
因此A, B, C类都会在IOC中

2. 规则-> @ComponentScan(basePackages="",excludeFilters=@ComponentScan.Filter(Animals.class))
在@ComonentScan中，会有默认规则,将@Component中的都加进去IOC当中,但是在exClude规则中,加上@Animals注解的类也会被排除到IOC容器之外
因此只有加了@Component，没加@Animals的C类都会在IOC中


Spring对资源的管理

1. ClassLoader  -> ClassPathResource
2. file  -> FileSystemResource
3. URL   -> UrlResource

SpringFramework加载资源的方式,通过defaultResourceLoader.getResource方法


@PropertySource引入xml文件


元信息
SpringFramework中的bean,一个个封装成元信息(bean的定义信息) --  beanDefinition
如;
bean的权限名 className; 作用域 scop; factoryBean; 属性值 propertyNames;

<alias/> -- bean的别名
<alias name = "furthName" alias = 'aliasName'/>

properties 将转换成 propertySource;propertySource存放着配置信息


Environment
    1.Spring的运行时环境。
    Spring包含了Profile和Porperties
    1.1. Profile -- 用于区分不同的环境模式
         spring.profiles.active=dev
         xxx.properties文件根据Profile设置的环境来加载对应的Properties文件
         在不符合Profile环境模式的bean将处于不活跃状态,不会加载到IOC容器中











